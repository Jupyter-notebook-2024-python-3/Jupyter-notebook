1-m1=int(input ("Enter test 1 marks:"))
m2=int(input ("Enter test 2 marks:"))
m3=int(input ("Enter test 3 marks:"))
if(m1<m2 and m1<m3):
 avg=(m2+m3)/2
 print("Average marks=",avg)
elif(m2<m1 and m2<m3):
 avg=(m1+m3)/2
 print("Average marks=",avg)
else:
 avg=(m2+m1)/2
 print("Average marks=",avg)
---
1-str_val=input("Enter a value")
if str_val==str_val[::-1]:
 print("PALINDROME")
else:
 print("NOT PALINDROME")
for i in range(10):
 if str_val.count(str(i))>0:
 print(str(i),"appears", str_val.count(str(i)),"times")
---
2-def fn(n):
 if n<=2:
 return n-1
 else:
 return fn(n-1)+fn(n-2)
try:
 num=int(input("enter a number"))
 if num>0:
 print(f'fn({num})={fn(num)}')
 else:
 print("input should be greater than zero")
except ValueError:
 print("try with numeric value")
---
2-def bin2Dec(val):
 rev=val[::-1]
 dec=0
 i=0
 for dig in rev:
 dec+=int(dig)*2**i
 i+=1
 return dec
def oct2Hex(val):
 rev=val[::-1]
 dec=0
 i=0
 for dig in rev:
 dec+=int(dig)*8**i
 i+=1
 list=[]
 while dec!=0:
 list.append(dec%16)
 dec=dec//16
 nl=[]
 for elem in list[::-1]:
 if elem<=9:
 nl.append(str(elem))
 else:
 nl.append(chr(ord('A')+(elem-10)))
 hex="".join(nl)
 return hex
num1=input("Enter a binay number:")
print(bin2Dec(num1))
num2=input("Enter a octal number:")
print(oct2Hex(num2))
---
3-import string
sentence=input("Enter a sentence:")
wordList=sentence.strip().split(" ")
print(f'This sentence has {len(wordList)} words',end='\n\n')
digicount=uppercase_count=lowercase_count=0
for character in sentence:
 if character in string.digits:
 digicount+=1
 elif character in string.ascii_uppercase:
 uppercase_count+=1
 elif character in string.ascii_lowercase:
 lowercase_count+=1
print(f'This sentence has {digicount} digits',f'{uppercase_count} uppercase
letters',f'{lowercase_count} lowercase letters',sep='\n')
---
3-str1=input("enter string1\n").lower()
str2=input("enter string2\n").lower()
string_1_length=len(str1)
string_2_length=len(str2)
short_string_length,long_string_length=min(string_1_length,string_2_length),max(string_1e
ngth,string_2_length)
match_count=0
for i in range(short_string_length):
 if str1[i]==str2[i]:
 match_count+=1
print("similarity between two said strings:")
print(match_count/long_string_length)
---
4-import matplotlib.pyplot as plt
categories=['Category a','Category b','Category c','Category d']
values=[10,25,15,30]
plt.bar(categories,values)
plt.xlabel("categories")
plt.ylabel("values")
plt.title("Bar plot example")
plt.show()
---
4-import matplotlib.pyplot as plt
x=[1,2,3,4,5]
y=[10,15,13,17,20]
plt.scatter(x,y,marker='.',color='blue',label='Data')
plt.xlabel('X Axis')
plt.ylabel('Y Axis')
plt.title("Scatter plot example")
plt.legend()
plt.grid()
plt.show()
---
5-import matplotlib.pyplot as plt
import numpy as np
data=np.random.randn(1000)
plt.hist(data,bins=22,color='orange',edgecolor='purple')
plt.xlabel("values")
plt.ylabel("Frequency")
plt.title("Histogram plot example")
plt.show()
---
5-import matplotlib.pyplot as plt
import numpy as np
countries=['Brazil','Germany','Italy','Argentina','France','Uruguay','England','Spain']
wins=[5,4,4,3,2,2,1,1]
colors=['yellow','magenta','green','blue','orange','teal','brown','red']
plt.pie(wins,labels=countries,autopct='%1.1f%%',colors=colors,startangle=90,explode=[0.2,0
,0,0,0,0,0,0],shadow=True)
plt.title("fifa World Cup win by Countries")
plt.show()
---
6-import matplotlib.pyplot as plt
years = [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]
revenue = [50000, 60000, 65000, 75000, 80000, 90000, 100000, 110000]
plt.plot(years,revenue, marker='o', color='green', linestyle='-', label='Annual Revenue')
 plt.xlabel('Year')
plt.ylabel('Revenue ($)')
plt.title('Company Annual Revenue Over the Years')
plt.grid(True, linestyle='--', alpha=0.7)
plt.legend()
plt.show()
---
6-import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(0,10,100)
y1 = x
y2 = x**2
y3 = np.sin(x)
plt.figure(figsize=(8, 6))
plt.plot(x,y1, label='Linear', color='blue', linestyle='-', marker='o', markersize=4,
linewidth=2)
plt.plot(x,y2, label='Quadratic', color='red', linestyle='--', linewidth=2)
plt.plot(x,y3, label='Sine', color='green', linestyle=':', marker='^', markersize=4, linewidth=2)
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('LinearPlotwithLineFormatting')
plt.legend()
plt.grid(True)
plt.show()
---
7-import seaborn as sns
df=sns.load_dataset("penguins")
sns.pairplot(df, hue="species")
---
7-import seaborn as sns
import matplotlib.pyplot as plt
iris = sns.load_dataset("iris")
sns.distplot(iris["sepal_length"],bins=10,kde=True)
plt.title("Distribution Plot of Sepal Length")
plt.xlabel("SepalLength(cm)")
plt.ylabel("Density")
plt.show()
---
7-import seaborn as sns
import matplotlib.pyplot as plt
iris = sns.load_dataset("iris")
sns.jointplot(x="sepal_length",y="sepal_width",data=iris,kind="reg")
plt.show()
---
7-import seaborn as sns
import matplotlib.pyplot as plt
tips = sns.load_dataset("tips")
sns.boxplot(x="day", y="total_bill", data=tips)
plt.title("BoxPlot:DistributionofTotalBillAmountbyDay")
plt.xlabel("Day of the Week")
plt.ylabel("TotalBillAmount($)")
plt.show()
---
7-import seaborn as sns
import matplotlib.pyplot as plt
iris = sns.load_dataset("iris")
correlation_matrix = iris.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("HeatmapofFeatureCorrelationsintheIrisDataset")
plt.show()
---
7-import seaborn as sns
import matplotlib.pyplot as plt
sns.lmplot(x="total_bill", y="tip", data=tips)
plt.title("LinearRegressionPlot:TotalBillvs.Tip")
plt.xlabel("Total Bill Amount ($)")
plt.ylabel("TipAmount($)")
plt.show()
---
7-import seaborn as sns
import matplotlib.pyplot as plt
tips = sns.load_dataset("tips")
g = sns.FacetGrid(tips, col="day", height=4)
g.map(sns.scatterplot, "total_bill", "tip")
g.set_axis_labels("TotalBillAmount($)","TipAmount($)")
g.set_titles("Day: {col_name}")
plt.suptitle("FacetGrid:ScatterPlotsofTotalBillvs.TipbyDay")
plt.show()
---
8-from bokeh.plotting import figure, show
from bokeh.models import ColumnDataSource
from bokeh.models.annotations import Title, Legend, LegendItem
from bokeh.io import output_notebook
# Sample data
x = [1, 2, 3, 4, 5]
y1 = [2, 5, 8, 6, 7]
y2 = [4, 6, 7, 5, 9]
p = figure(title="Line Graph with Annotations and Legends", x_axis_label="X-axis",
y_axis_label="Y-axis")
source1=ColumnDataSource(data=dict(x=x,y=y1))
source2 = ColumnDataSource(data=dict(x=x, y=y2))
line1 = p.line('x', 'y', source=source1, line_width=2, line_color="blue", legend_label="Line
1")
line2 = p.line('x', 'y', source=source2, line_width=2, line_color="red", legend_label="Line
2")
annotation=Title(text="AnnotationExample",text_font_size="14px")
p.add_layout(annotation, 'above')
legend=Legend(items=[LegendItem(label="Line1",renderers=[line1]),LegendItem(label="Li
ne2",renderers=[line2])]) p.add_layout(legend, 'above')
output_notebook()
show(p)
---
8-from bokeh.plotting import figure, show, output_file
from bokeh.models import ColumnDataSource
from bokeh.layouts import layout
import random
x= list(range(1, 11))
y1=[random.randint(1,10)for_inx]
y2 = [random.randint(1, 10) for _ in x]
p1=figure(title="LinePlot",x_axis_label="X-axis",y_axis_label="Yaxis",plot_width=400,plot_height=300) p1.line(x, y1, line_width=2, line_color="blue")
p2=figure(title="ScatterPlot",x_axis_label="X-axis",y_axis_label="Yaxis",plot_width=400,plot_height=300)
p2.scatter(x, y2, size=10, color="red", marker="circle")
p3=figure(title="BarPlot",x_axis_label="X-axis",y_axis_label="Yaxis",plot_width=400,plot_height=300) p3.vbar(x=x, top=y1, width=0.5, color="green")
p4=figure(title="Histogram",x_axis_label="Value",y_axis_label="Frequency",plot_width=40
0,plot_height=300) hist, edges = np.histogram(y1, bins=5)
p4.quad(top=hist,bottom=0, left=edges[:-1], right=edges[1:], fill_color="purple",
line_color="black")
layout=layout([ [p1, p2], [p3, p4] ])
output_file("bokeh_plots.html")
show(layout)
---
9-import plotly.graph_objects as go
import numpy as np
# Create data for the 3D surface plot
x = np.linspace(-5, 5, 100)
y=np.linspace(-5,5,100) x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x**2 + y**2))
# Create the 3D surface plot
fig = go.Figure(data=[go.Surface(z=z, x=x, y=y)])
# Customize the layout
fig.update_layout( scene=dict( xaxis_title='XAxis', yaxis_title='YAxis', zaxis_title='Z Axis',
), title='3D Surface Plot Example', )
# Show the plot
fig.show()
---
10-import plotly.graph_objs as go
import plotly.offline as pyo
import pandas as pd
data={'Date':pd.date_range(start='2023-01-01',periods=10,freq='D'), 'Value': [25, 30, 35, 40,
45, 50, 55, 60, 65, 70]}
df = pd.DataFrame(data)
trace = go.Scatter(x=df['Date'], y=df['Value'], mode='lines', name='Time Series')
layout=go.Layout(title='TimeSeriesPlot',xaxis=dict(title='Date'),yaxis=dict(title='Value'))
fig = go.Figure(data=[trace], layout=layout)
pyo.plot(fig, filename='time_series_plot.html')
---
10-import plotly.express as px
import pandas as pd
data = { "City": ["Bengaluru", "Mysuru", "Belagavi", "Kalburgi", "Davanagere", "New
Delhi"], "Lat": [12.9716, 12.2958, 15.8497, 17.3291, 14.4644, 28.6139], "Lon": [77.5946,
76.6394, 74.5048, 77.2471, 75.9224, 77.2090] }
df = pd.DataFrame(data)
fig = px.scatter_geo(df, lat="Lat", lon="Lon", text="City", title="Cities in India",
projection="natural earth")
fig.show()